# import library 
from confluent_kafka import Producer 
import sys 

if __name__ == '__main__':
    # Set up config to connect to Kafka 
    broker = sys.argv[1]
    topic = sys.argv[2]
    filename = sys.argv[3]
    
    conf = {'bootstrap.servers': broker}
    
    # Create Producer instance 
    p = Producer(**conf)
    
    # optional delivery callback when message got delivered or failed 
    def delivery_callback(err, msg):
        if err:
            sys.stderr.write('%% Message failed delivery: %s\n' % err)
        else:
            sys.stderr.write('%% Message delivered to %s [%d] @ %o\n' % (msg.topic(), msg.partition(), msg.offset()))
            
    # Read source from a text file - produce to Kafka 
    with open(filename) as finput:    
        for line in finput:
            try:
                p.produce(topic, line.rstrip(), callback = delivery_callback)
                
            except BufferError as e:
                sys.stderr.write('%% Local producer queue is full (%d messages awaiting delivery): try again \n' % len(p))
            
            p.poll(0)
            sys.stderr.write('%% Waiting for %d deliveries \n' % len(p))
            p.flush()


